#!/bin/sh
# postinst script for kamiwaza

set -x


# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Log functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}
# Initialize variables for tracking installation progress
START_TIME=$(date +%s)
TOTAL_STEPS=10  # Total number of major installation steps
CURRENT_STEP=0

# Function to update and display progress
update_progress() {
    local step_name="$1"
    CURRENT_STEP=$((CURRENT_STEP + 1))
    local percentage=$((CURRENT_STEP * 100 / TOTAL_STEPS))
    local current_time=$(date +%s)
    local elapsed_time=$((current_time - START_TIME))
    local elapsed_minutes=$((elapsed_time / 60))
    local elapsed_seconds=$((elapsed_time % 60))
    
    echo "┌────────────────────────────────────────────────────────────┐"
    echo "│ Progress: [$percentage%] Step $CURRENT_STEP/$TOTAL_STEPS: $step_name"
    echo "│ Time elapsed: ${elapsed_minutes}m ${elapsed_seconds}s"
    echo "└────────────────────────────────────────────────────────────┘"
}


log_info "================================================="
log_info "================================================="
log_info "================================================="
log_info "===== Starting Kamiwaza Offline Installation ===="
log_info "================================================="
log_info "================================================="
log_info "================================================="

# if running as root, print a warning (but do not exit)
if [ "$EUID" -eq 0 ]; then
    log_warn "This script is running as root. It is recommended to run as a regular user with sudo privileges."
fi

# Check if sudo is available
if ! command -v sudo >/dev/null 2>&1; then
    log_error "sudo is required but not installed. Please install sudo or run this script as root."
    exit 1
fi

sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock /var/lib/apt/lists/lock

# Version of this package
PACKAGE_VERSION="0.3.3-1"
# Ensure /usr/local/bin is in PATH
export PATH="/usr/local/bin:$PATH"

INSTALL_DIR="/opt/kamiwaza"
WHEELS_DIR="/usr/share/kamiwaza/offline_python_wheels"
DEBS_DIR="/usr/share/kamiwaza/offline_debs"
CUDA_DIR="/usr/share/kamiwaza/offline_cuda"
COCKROACH_TGZ="/usr/share/kamiwaza/offline_cockroach/cockroach-v24.1.0.linux-amd64.tgz"
NODEJS_TAR="/usr/share/kamiwaza/offline_nodejs/node-v18.x-linux-x64.tar.xz"
KAMIWAZA_DEPLOY_TAR="/usr/share/kamiwaza/kamiwaza-deploy/kamiwaza-deploy.tar.gz"
DOCKER_COMPOSE_PATH="/usr/share/kamiwaza/offline_docker/docker-compose-linux-x86_64"
DOCKER_TAR="/usr/share/kamiwaza/offline_docker/docker-25.0.3.tgz"


# Function to compare version strings
version_gt() {
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

# Function to get installed version
get_installed_version() {
    dpkg-query -W -f='${Version}' kamiwaza 2>/dev/null || echo "0.0.0-0"
}

echo "Current directory: $(pwd)"
echo "User: $USER"
echo "SUDO_USER: $SUDO_USER"
update_progress "Initializing installation"

# Create installation directory
echo "=== Creating installation directory ==="
INSTALL_DIR="/opt/kamiwaza"
echo "Installation directory: $INSTALL_DIR"
sudo chown -R $USER:$USER /opt
mkdir -p $INSTALL_DIR
cd $INSTALL_DIR
echo "Changed to directory: $(pwd)"
sudo chown -R $USER:$USER /opt/kamiwaza
sudo chown -R $USER:$USER /usr/share/kamiwaza

# Extract /usr/share/kamiwaza/kamiwaza-deploy/kamiwaza-deploy.tar.gz to /opt/kamiwaza/
echo "=== Extracting kamiwaza-deploy ==="
tar -xzf /usr/share/kamiwaza/kamiwaza-deploy/kamiwaza-deploy.tar.gz -C $INSTALL_DIR

# Add the virtual environment to the installation directory
echo "=== Adding virtual environment ==="
python3.10 -m venv $INSTALL_DIR/venv

# Install the pip requirements
update_progress "Installing pip requirements"
echo "=== Installing pip requirements ==="
$INSTALL_DIR/venv/bin/pip install --upgrade pip
$INSTALL_DIR/venv/bin/pip install --no-index --find-links="$WHEELS_DIR" "$WHEELS_DIR"/*.whl

# Install the docker-compose.tar.gz to /opt/kamiwaza/
update_progress "Installing docker-compose"
echo "=== Installing docker-compose ==="
cp $DOCKER_COMPOSE_PATH $INSTALL_DIR/docker-compose
chmod +x $INSTALL_DIR/docker-compose

# Install the docker.tar.gz to /opt/kamiwaza/
update_progress "Installing docker"
echo "=== Installing docker ==="
tar -xzf $DOCKER_TAR -C $INSTALL_DIR

# Now ensure user is part of the docker group or else we'll get Please ensure your user is added to the 'docker' group and try again.
sudo usermod -aG docker $USER

# Install the node-v18.x-linux-x64.tar.xz to /opt/kamiwaza/
update_progress "Installing node"
echo "=== Installing node ==="

tar -xf $NODEJS_TAR -C $INSTALL_DIR

# Install the cockroach-v24.1.0.linux-amd64.tgz to /opt/kamiwaza/
update_progress "Installing cockroach"
echo "=== Installing cockroach ==="
tar -xzf $COCKROACH_TGZ -C $INSTALL_DIR
sudo ln -sf "$INSTALL_DIR/cockroach-v24.1.0.linux-amd64/cockroach" /usr/local/bin/cockroach

# Install the debs
update_progress "Installing debs"
echo "=== Installing debs ==="
sudo dpkg -i /usr/share/kamiwaza/offline_debs/*.deb


# Set permissions
echo "=== Setting permissions ==="
sudo chown -R $USER:$USER $INSTALL_DIR


# if there's no env.sh in the installation directory, make one: 
echo "=== Creating env.sh ==="
cd $INSTALL_DIR

# Check if env.sh already exists
if [ -f "env.sh" ]; then
    log_info "env.sh already exists. Using existing file."
else
    # Check if env.sh.example exists
    if [ -f "env.sh.example" ]; then
        cp env.sh.example env.sh
        log_info "Created env.sh from example template."
    else
        log_warn "env.sh.example not found. Creating env.sh manually."
        cat > env.sh << EOL
# Environment variables for Kamiwaza
export KAMIWAZA_CLUSTER_MEMBER=true
export KAMIWAZA_INSTALL_ROOT=/opt/kamiwaza
export KAMIWAZA_SWARM_HEAD=true
export KAMIWAZA_ORIG_NODE_TYPE=head
export KAMIWAZA_RUN_FROM_INSTALL='yes'
export KAMIWAZA_HEAD_IP=$(hostname -I | awk '{print $1}')
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
export VIRTUAL_ENV=True
EOL
    fi
fi
    
    # Source the environment file
    source env.sh



# # Check if we're installing an older version
# INSTALLED_VERSION=$(get_installed_version)
# if ! version_gt "$PACKAGE_VERSION" "$INSTALLED_VERSION"; then
#     echo "WARNING: Attempting to install version $PACKAGE_VERSION but version $INSTALLED_VERSION is already installed"
#     if [ "$FORCE_INSTALL" != "true" ]; then
#         echo "Forcing removal of existing installation to ensure clean state..."
#         # Kill any existing processes
#         pkill -9 -f "kamiwaza" || true
#         # Remove existing installation
#         rm -rf /opt/kamiwaza/*
#         # Force remove package without removing config
#         dpkg -r --force-all kamiwaza || true
#     fi
# fi

# After version check, add timestamp verification for downloaded files
# echo "=== Verifying file timestamps ==="
# TIMESTAMP_FILE="/opt/kamiwaza/.last_install"
# CURRENT_TIME=$(date +%s)

# # Function to check if a file is newer than timestamp
# is_file_newer() {
#     local file="$1"
#     local timestamp="$2"
#     if [ -f "$file" ]; then
#         local file_time=$(stat -c %Y "$file")
#         test "$file_time" -gt "$timestamp"
#     else
#         # If file doesn't exist, consider it "newer"
#         return 0
#     fi
# }

# # If timestamp exists and files are older, force clean install
# if [ -f "$TIMESTAMP_FILE" ]; then
#     LAST_INSTALL=$(cat "$TIMESTAMP_FILE")
#     if ! is_file_newer "$TAR_FILE" "$LAST_INSTALL"; then
#         echo "Detected older installation files, forcing clean install..."
#         rm -rf /opt/kamiwaza/*
#         rm -f "$TIMESTAMP_FILE"
#     fi
# fi

# Add deadsnakes PPA for Python if needed
sudo add-apt-repository -y ppa:deadsnakes/ppa || true

# Update package lists
sudo apt-get update -y


# Check for supported distributions
check_distribution() {
    if command -v lsb_release >/dev/null 2>&1; then
        distro=$(lsb_release -is)
        if [ "$distro" != "Ubuntu" ]; then
            echo "This script is designed for Ubuntu. Exiting."
            exit 1
        fi
        echo "Running on $(lsb_release -ds)"
    elif [ -f /etc/redhat-release ]; then
        echo "Running on RedHat-based system: $(cat /etc/redhat-release)"
        export IS_REDHAT=true
    else
        echo "Unsupported distribution. This script requires Ubuntu or RedHat-based systems."
        exit 1
    fi
}

# Wait for package manager lock function
wait_for_package_lock() {
    echo "Removing any existing package manager locks..."
    
    if [ "$IS_REDHAT" = true ]; then
        # Remove RedHat package manager locks
        sudo rm -f /var/run/yum.pid /var/run/dnf.pid
    else
        # Remove Ubuntu package manager locks
        sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
    fi
    
    echo "Locks removed, proceeding with installation..."
}

# Check distribution
check_distribution

# DREW ADD PIP AND PYTHON INSTALLATION HERE
# Also add Updating existing python symlink

# DREW NOTE: Prepare permissions prior to extraction
# Devs should have the SSH keys, and the version number of the kamiwaza to download
# BEFORE: script should clone the repo
# REQUIREMENTS should be packaged into a wheel

# 1. Pull the repos
# 2. Package requirements into a wheel
# 3. Update linux distro requirements
# 4. Package the whole thing into a deb
# 5. Build the deb


# Set permissions
echo "=== Setting permissions ==="
sudo chown -R $USER:$USER $INSTALL_DIR

# # Make sure 'python' command points to Python 3.10
# echo "=== Setting up python command to use Python 3.10 ==="
# if [ -e /usr/bin/python ]; then
#     echo "Updating existing python symlink..."
#     rm -f /usr/bin/python

# fi
# ln -sf /usr/bin/python3.10 /usr/bin/python
# echo "python now points to $(readlink -f /usr/bin/python)"

echo "=== Creating installation directory ==="
mkdir -p "$INSTALL_DIR"

echo "=== Extracting kamiwaza-deploy repo ==="
if [ -f "$KAMIWAZA_DEPLOY_TAR" ]; then
    tar -xzf "$KAMIWAZA_DEPLOY_TAR" -C "$INSTALL_DIR" --strip-components=1
else
    log_error "ERROR: $KAMIWAZA_DEPLOY_TAR not found!"
    exit 1
fi

echo "=== Extracting CockroachDB ==="
if [ -f "$COCKROACH_TGZ" ]; then
    tar -xzf "$COCKROACH_TGZ" -C "$INSTALL_DIR"
    sudo ln -sf "$INSTALL_DIR/cockroach-v24.1.0.linux-amd64/cockroach" /usr/local/bin/cockroach
else
    log_warn "WARNING: $COCKROACH_TGZ not found, skipping CockroachDB extraction."
fi

echo "=== Extracting Node.js ==="
if [ -f "$NODEJS_TAR" ]; then
    tar -xf "$NODEJS_TAR" -C "$INSTALL_DIR"
    NODEJS_DIR=$(tar -tf "$NODEJS_TAR" | head -1 | cut -f1 -d"/")
    if [ -d "$INSTALL_DIR/$NODEJS_DIR/bin" ]; then
        sudo ln -sf "$INSTALL_DIR/$NODEJS_DIR/bin/node" /usr/local/bin/node
        sudo ln -sf "$INSTALL_DIR/$NODEJS_DIR/bin/npm" /usr/local/bin/npm
    fi
else
    log_warn "WARNING: $NODEJS_TAR not found, skipping Node.js extraction."
fi

echo "=== Installing CUDA .deb files ==="
if [ -d "$CUDA_DIR" ]; then
    # Check if there are any .deb files in the directory
    if ls "$CUDA_DIR"/*.deb >/dev/null 2>&1; then
        sudo dpkg -i "$CUDA_DIR"/*.deb || sudo apt-get -f install -y
    else
        log_warn "WARNING: No .deb files found in $CUDA_DIR, skipping CUDA .deb install."
    fi
else
    log_warn "WARNING: $CUDA_DIR not found, skipping CUDA .deb install."
fi

echo "=== Installing other .deb files ==="
if [ -d "$DEBS_DIR" ]; then
    sudo dpkg -i "$DEBS_DIR"/*.deb || sudo apt-get -f install -y
else
    log_warn "WARNING: $DEBS_DIR not found, skipping .deb install."
fi

echo "=== Ensuring Python 3.10 and pip are installed ==="
if ! command -v python3.10 >/dev/null 2>&1; then
    log_error "ERROR: Python 3.10 is required but not installed."
    exit 1
fi
if ! command -v pip3 >/dev/null 2>&1; then
    log_info "pip3 not found, installing..."
    apt-get update && apt-get install -y python3-pip
fi

echo "=== Creating Python virtual environment ==="
python3.10 -m venv "$INSTALL_DIR/venv"
"$INSTALL_DIR/venv/bin/pip" install --upgrade pip
"$INSTALL_DIR/venv/bin/pip" install --no-index --find-links="$WHEELS_DIR" "$WHEELS_DIR"/*.whl

echo "=== Setting permissions ==="
sudo chown -R $USER:$USER "$INSTALL_DIR"
sudo chmod -R 755 "$INSTALL_DIR"



cd $INSTALL_DIR
update_progress "=== Installing kamiwaza Python Dependencies ==="
. env.sh
. common.sh
# Setup kamiwaza-start as a command
echo '#!/bin/sh
/opt/kamiwaza/linux-install.sh --non-interactive "$@"' | sudo tee /usr/local/bin/kamiwaza-start > /dev/null
sudo chmod +x /usr/local/bin/kamiwaza-start


log_info "================================================="
log_info "=== Kamiwaza offline installation complete! ==="
log_info "Please run kamiwaza-start to start the cluster"
log_info "================================================="
exit 0 