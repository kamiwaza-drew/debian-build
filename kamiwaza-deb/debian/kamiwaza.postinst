#!/bin/sh
# postinst script for kamiwaza
echo "=== Starting Kamiwaza installation (offline) ==="

set -e

sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock /var/lib/apt/lists/lock

# Version of this package
PACKAGE_VERSION="0.3.3-1"
# Ensure /usr/local/bin is in PATH
export PATH="/usr/local/bin:$PATH"

INSTALL_DIR="/opt/kamiwaza"
WHEELS_DIR="/usr/share/kamiwaza/wheels"
DEBS_DIR="/usr/share/kamiwaza/debs"
CUDA_DIR="/usr/share/kamiwaza/cuda"
COCKROACH_TGZ="/usr/share/kamiwaza/cockroach-v24.1.0.linux-amd64.tgz"
NODEJS_TAR="/usr/share/kamiwaza/node-v18.20.3-linux-x64.tar.xz"
KAMIWAZA_DEPLOY_TAR="/usr/share/kamiwaza/kamiwaza-deploy.tar.gz"

# Function to compare version strings
version_gt() {
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

# Function to get installed version
get_installed_version() {
    dpkg-query -W -f='${Version}' kamiwaza 2>/dev/null || echo "0.0.0-0"
}

echo "Current directory: $(pwd)"
echo "User: $USER"
echo "SUDO_USER: $SUDO_USER"

# Create installation directory
echo "=== Creating installation directory ==="
INSTALL_DIR="/opt/kamiwaza"
echo "Installation directory: $INSTALL_DIR"
mkdir -p $INSTALL_DIR
cd $INSTALL_DIR
echo "Changed to directory: $(pwd)"

# # Check if we're installing an older version
# INSTALLED_VERSION=$(get_installed_version)
# if ! version_gt "$PACKAGE_VERSION" "$INSTALLED_VERSION"; then
#     echo "WARNING: Attempting to install version $PACKAGE_VERSION but version $INSTALLED_VERSION is already installed"
#     if [ "$FORCE_INSTALL" != "true" ]; then
#         echo "Forcing removal of existing installation to ensure clean state..."
#         # Kill any existing processes
#         pkill -9 -f "kamiwaza" || true
#         # Remove existing installation
#         rm -rf /opt/kamiwaza/*
#         # Force remove package without removing config
#         dpkg -r --force-all kamiwaza || true
#     fi
# fi

# After version check, add timestamp verification for downloaded files
# echo "=== Verifying file timestamps ==="
# TIMESTAMP_FILE="/opt/kamiwaza/.last_install"
# CURRENT_TIME=$(date +%s)

# # Function to check if a file is newer than timestamp
# is_file_newer() {
#     local file="$1"
#     local timestamp="$2"
#     if [ -f "$file" ]; then
#         local file_time=$(stat -c %Y "$file")
#         test "$file_time" -gt "$timestamp"
#     else
#         # If file doesn't exist, consider it "newer"
#         return 0
#     fi
# }

# # If timestamp exists and files are older, force clean install
# if [ -f "$TIMESTAMP_FILE" ]; then
#     LAST_INSTALL=$(cat "$TIMESTAMP_FILE")
#     if ! is_file_newer "$TAR_FILE" "$LAST_INSTALL"; then
#         echo "Detected older installation files, forcing clean install..."
#         rm -rf /opt/kamiwaza/*
#         rm -f "$TIMESTAMP_FILE"
#     fi
# fi

# Add deadsnakes PPA for Python if needed
add-apt-repository -y ppa:deadsnakes/ppa || true

# Update package lists
apt-get update -y


# Check for supported distributions
check_distribution() {
    if command -v lsb_release >/dev/null 2>&1; then
        distro=$(lsb_release -is)
        if [ "$distro" != "Ubuntu" ]; then
            echo "This script is designed for Ubuntu. Exiting."
            exit 1
        fi
        echo "Running on $(lsb_release -ds)"
    elif [ -f /etc/redhat-release ]; then
        echo "Running on RedHat-based system: $(cat /etc/redhat-release)"
        export IS_REDHAT=true
    else
        echo "Unsupported distribution. This script requires Ubuntu or RedHat-based systems."
        exit 1
    fi
}

# Wait for package manager lock function
wait_for_package_lock() {
    echo "Removing any existing package manager locks..."
    
    if [ "$IS_REDHAT" = true ]; then
        # Remove RedHat package manager locks
        sudo rm -f /var/run/yum.pid /var/run/dnf.pid
    else
        # Remove Ubuntu package manager locks
        sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
    fi
    
    echo "Locks removed, proceeding with installation..."
}

# Check distribution
check_distribution

# DREW ADD PIP AND PYTHON INSTALLATION HERE
# Also add Updating existing python symlink

# DREW NOTE: Prepare permissions prior to extraction
# Devs should have the SSH keys, and the version number of the kamiwaza to download
# BEFORE: script should clone the repo
# REQUIREMENTS should be packaged into a wheel

# 1. Pull the repos
# 2. Package requirements into a wheel
# 3. Update linux distro requirements
# 4. Package the whole thing into a deb
# 5. Build the deb

# ============= DEV-ONLY: Overwrite extracted files with /home/kamiwaza/temp_use/ =============
echo "=== [DEV ONLY] Overwriting extracted files with /home/kamiwaza/temp_use/ ==="
if [ -d "/home/kamiwaza/temp_use/" ]; then
    cp -rf /home/kamiwaza/temp_use/* "$INSTALL_DIR/"
    echo "[DEV ONLY] Copied files from /home/kamiwaza/temp_use/ to $INSTALL_DIR/"
else
    echo "[DEV ONLY] /home/kamiwaza/temp_use/ does not exist, skipping dev overwrite."
fi
# ============= END DEV-ONLY =============

# Set permissions
echo "=== Setting permissions ==="
chown -R $SUDO_USER:$SUDO_USER $INSTALL_DIR

# # Make sure 'python' command points to Python 3.10
# echo "=== Setting up python command to use Python 3.10 ==="
# if [ -e /usr/bin/python ]; then
#     echo "Updating existing python symlink..."
#     rm -f /usr/bin/python

# fi
# ln -sf /usr/bin/python3.10 /usr/bin/python
# echo "python now points to $(readlink -f /usr/bin/python)"

echo "=== Creating installation directory ==="
mkdir -p "$INSTALL_DIR"

echo "=== Extracting kamiwaza-deploy repo ==="
if [ -f "$KAMIWAZA_DEPLOY_TAR" ]; then
    tar -xzf "$KAMIWAZA_DEPLOY_TAR" -C "$INSTALL_DIR" --strip-components=1
else
    echo "ERROR: $KAMIWAZA_DEPLOY_TAR not found!"
    exit 1
fi

echo "=== Extracting CockroachDB ==="
if [ -f "$COCKROACH_TGZ" ]; then
    tar -xzf "$COCKROACH_TGZ" -C "$INSTALL_DIR"
    ln -sf "$INSTALL_DIR/cockroach-v24.1.0.linux-amd64/cockroach" /usr/local/bin/cockroach
else
    echo "WARNING: $COCKROACH_TGZ not found, skipping CockroachDB extraction."
fi

echo "=== Extracting Node.js ==="
if [ -f "$NODEJS_TAR" ]; then
    tar -xf "$NODEJS_TAR" -C "$INSTALL_DIR"
    NODEJS_DIR=$(tar -tf "$NODEJS_TAR" | head -1 | cut -f1 -d"/")
    if [ -d "$INSTALL_DIR/$NODEJS_DIR/bin" ]; then
        ln -sf "$INSTALL_DIR/$NODEJS_DIR/bin/node" /usr/local/bin/node
        ln -sf "$INSTALL_DIR/$NODEJS_DIR/bin/npm" /usr/local/bin/npm
    fi
else
    echo "WARNING: $NODEJS_TAR not found, skipping Node.js extraction."
fi

echo "=== Installing CUDA .deb files ==="
if [ -d "$CUDA_DIR" ]; then
    dpkg -i "$CUDA_DIR"/*.deb || apt-get -f install -y
else
    echo "WARNING: $CUDA_DIR not found, skipping CUDA .deb install."
fi

echo "=== Installing other .deb files ==="
if [ -d "$DEBS_DIR" ]; then
    dpkg -i "$DEBS_DIR"/*.deb || apt-get -f install -y
else
    echo "WARNING: $DEBS_DIR not found, skipping .deb install."
fi

echo "=== Ensuring Python 3.10 and pip are installed ==="
if ! command -v python3.10 >/dev/null 2>&1; then
    echo "ERROR: Python 3.10 is required but not installed."
    exit 1
fi
if ! command -v pip3 >/dev/null 2>&1; then
    echo "pip3 not found, installing..."
    apt-get update && apt-get install -y python3-pip
fi

echo "=== Creating Python virtual environment ==="
python3.10 -m venv "$INSTALL_DIR/.venv"
"$INSTALL_DIR/.venv/bin/pip" install --upgrade pip
"$INSTALL_DIR/.venv/bin/pip" install --no-index --find-links="$WHEELS_DIR" "$WHEELS_DIR"/*.whl

echo "=== Setting permissions ==="
chown -R root:root "$INSTALL_DIR"
chmod -R 755 "$INSTALL_DIR"

echo "=== Kamiwaza offline installation complete! ==="
exit 0 